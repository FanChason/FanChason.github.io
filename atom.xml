<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fan Chason&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-04-22T02:58:33.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fan Chason</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Viper架构探索实践（一）</title>
    <link href="http://example.com/2019/10/17/Viper%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2019/10/17/Viper%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-10-17T11:35:00.000Z</published>
    <updated>2020-04-22T02:58:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="viper架构图"><a class="markdownIt-Anchor" href="#viper架构图">#</a> Viper 架构图</h1><p><img src="http://upload-images.jianshu.io/upload_images/1432381-6aa65d17f5ed033f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/1432381-0b5691a0070fbabd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1865432-580872920986b640.png"></p><h2 id="viper的主要部分"><a class="markdownIt-Anchor" href="#viper的主要部分">#</a> VIPER 的主要部分</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介">#</a> 简介</h3><ul><li>View: (视图）： 显示 Presenter 告知的内容，并将用户输入中继回 Presenter。</li><li>Interactor: (交互器）：包含用例指定的业务逻辑。</li><li>Presenter: (表示层，也可称主持人）：包含用于准备显示内容（如从 Interactor 接收的）和用于对用户输入做出反应（通过从 Interactor 请求新数据）的视图逻辑。</li><li>Entity: (实体）：包含 Interactor 使用的基本模型对象。</li><li>Routing: (路由）：包含用于描述按哪个顺序显示哪些屏幕的导航逻辑。</li></ul><blockquote><p>这种分离也符合<a href="http://www.objectmentor.com/resources/articles/srp.pdf">单一责任原则</a>。<br>Interactor 负责业务分析师<br> Presenter 代表交互设计师<br> View 负责视觉设计师</p></blockquote><h3 id="相比mvx"><a class="markdownIt-Anchor" href="#相比mvx">#</a> 相比 MVX</h3><p>相比之前的 MVX 架构，VIPER 多出了两个东西：Interactor（交互器）和 Router（路由）。</p><p>各部分职责如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- View</span><br><span class="line">提供完整的视图，负责视图的组合、布局、更新</span><br><span class="line">向Presenter提供更新视图的接口</span><br><span class="line">将View相关的事件发送给Presenter</span><br><span class="line"></span><br><span class="line">- Presenter</span><br><span class="line">接收并处理来自View的事件</span><br><span class="line">向Interactor请求调用业务逻辑</span><br><span class="line">向Interactor提供View中的数据</span><br><span class="line">接收并处理来自Interactor的数据回调事件</span><br><span class="line">通知View进行更新操作</span><br><span class="line">通过Router跳转到其他View</span><br><span class="line"></span><br><span class="line">- Router</span><br><span class="line">提供View之间的跳转功能，减少了模块间的耦合</span><br><span class="line">初始化VIPER的各个模块</span><br><span class="line"></span><br><span class="line">- Interactor</span><br><span class="line">维护主要的业务逻辑功能，向Presenter提供现有的业务用例</span><br><span class="line">维护、获取、更新Entity</span><br><span class="line">当有业务相关的事件发生时，处理事件，并通知Presenter</span><br><span class="line"></span><br><span class="line">- Entity</span><br><span class="line">和Model一样的数据模型</span><br></pre></td></tr></table></figure><h1 id="viper模版代码生成工具"><a class="markdownIt-Anchor" href="#viper模版代码生成工具">#</a> Viper 模版代码生成工具</h1><h2 id="推荐两个模版"><a class="markdownIt-Anchor" href="#推荐两个模版">#</a> 推荐两个模版</h2><h3 id="viperit"><a class="markdownIt-Anchor" href="#viperit">#</a> <a href="https://github.com/ferranabello/Viperit">Viperit</a></h3><ul><li>支持 Swift、SwiftUI</li><li>可创建 viper 架构模版</li></ul><h3 id="generamba"><a class="markdownIt-Anchor" href="#generamba">#</a> <a href="https://github.com/strongself/Generamba">Generamba</a></h3><ul><li>支持 OC 和 Swift</li><li>可以创建 mvvm、viper 模版</li></ul><h2 id="了解模版语言liquid"><a class="markdownIt-Anchor" href="#了解模版语言liquid">#</a> 了解模版语言 Liquid</h2><p>github 源码：<strong><a href="https://github.com/Shopify/liquid">liquid</a></strong><br><a href="https://www.baidu.com/link?url=fK4IqIz8Jd_NwiiLfMbodfFYy5521QApXPJBhxB5yD_ACOge0kdPzMlm5_3B_tT9&amp;wd=&amp;eqid=df8a26640004378f000000045a6a8ac1"><em>Liquid</em> 模板语言中文文档</a></p><blockquote><p>Liquid 是一门开源的模板语言，由 <a href="https://www.shopify.com/">Shopify</a> 创造并用 Ruby 实现。它是 Shopify 主题的骨骼，并且被用于加载店铺系统的动态内容。<br><br>从 2006 年起，Liquid 就被 Shopify 所使用，现在更是被大量 web 应用所使用</p></blockquote><h1 id="viper架构实践"><a class="markdownIt-Anchor" href="#viper架构实践">#</a> Viper 架构实践</h1><p>基于 Viperit 写了一个简单的新闻的 demo<br><strong><a href="https://github.com/FanChason/XCViperitDemo">XCViperitDemo</a></strong></p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考：</h1><ol><li>viper 原作者 By <a href="mailto:jeff.gilbert@mutualmobile.com">Jeff Gilbert</a> and <a href="https://twitter.com/conradstoll">Conrad Stoll</a> 著<br><a href="https://www.objc.io/issues/13-architecture/viper/"> Architecting iOS Apps with VIPER</a></li><li><a href="https://juejin.im/post/599a43035188252432172045">iOS VIPER 架构实践 (二)：VIPER 详解与实现</a></li><li><a href="https://www.jianshu.com/p/340b39c6d256">iOS 架构模式 - VIPER</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;viper架构图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#viper架构图&quot;&gt;#&lt;/a&gt; Viper 架构图&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_ima</summary>
      
    
    
    
    <category term="作者：Fan Chason" scheme="http://example.com/categories/%E4%BD%9C%E8%80%85%EF%BC%9AFan-Chason/"/>
    
    
    <category term="架构" scheme="http://example.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用fastlane实现iOS自动化打包上传fir.im和testflight</title>
    <link href="http://example.com/2019/10/11/%E4%BD%BF%E7%94%A8fastlane%E5%AE%9E%E7%8E%B0iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0fir-im%E5%92%8Ctestflight/"/>
    <id>http://example.com/2019/10/11/%E4%BD%BF%E7%94%A8fastlane%E5%AE%9E%E7%8E%B0iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0fir-im%E5%92%8Ctestflight/</id>
    <published>2019-10-11T08:41:33.000Z</published>
    <updated>2020-04-22T02:58:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p><em>日复一日重复打包工作，是在浪费宝贵的时间</em></p><p><em>自动化打包工具应运而生，是我们解放双手的利器</em></p><p><a href="https://docs.fastlane.tools/">fastlane 官方文档</a></p><p><a href="https://github.com/fastlane/fastlane/tree/master/fastlane/docs#fastfile">github 地址</a></p><h2 id="安装fastlane"><a class="markdownIt-Anchor" href="#安装fastlane">#</a> 安装 fastlane</h2><h3 id="安装最新的xcode命令行工具"><a class="markdownIt-Anchor" href="#安装最新的xcode命令行工具">#</a> 安装最新的 Xcode 命令行工具</h3><blockquote><p>可以<a href="https://developer.apple.com/download/more/"> Developer Apple</a> 上手动下载对应的 <code>Command Line Tools</code>  安装</p></blockquote><p><em>fastlane 官方推荐的 <code>xcode-select --install</code>  安装时最后结果是<strong>不能安装该软件</strong></em></p><h3 id="安装-fastlane"><a class="markdownIt-Anchor" href="#安装-fastlane">#</a> 安装 fastlane</h3><p><em>放到 <code>/usr/local/bin</code>  下面</em></p><p><code>sudo gem install -n /usr/local/bin fastlane</code></p><p>其他的安装方法：（扩展，可跳过）</p><p><img src="1970838-d07d8f2b55853319.png" alt=""></p><blockquote><p>第一种是通过 Homebrew 软件包管理器来进行安装，<br>第二种就是我们最熟悉的方式，下载安装包来进行安装，<br>第三种是通过 RubyGems 来进行，RubyGems 是一个方便的 Ruby 程序包管理器，可以将一个 Ruby 应用程序打包到一个 Gem 里，作为一个安装单元。 一个  Gem 就是一个封装起来的应用程序或代码库</p></blockquote><h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量">#</a> 配置环境变量</h2><p>添加用户环境变量</p><p><code>vim ~/.bash_profile</code></p><p>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:$PATH</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存退出，使用  <code>source ~/.bash_profile</code>  来使配置立即生效</p><p>现在在项目根目录下可以使用 <code>fastlane</code>  了</p><h2 id="fastlane使用"><a class="markdownIt-Anchor" href="#fastlane使用">#</a> fastlane 使用</h2><h3 id="在项目根目录下初始化"><a class="markdownIt-Anchor" href="#在项目根目录下初始化">#</a> 在项目根目录下初始化</h3><p><code>fastlane init</code></p><ul><li><p>四个选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What would you like to use fastlane for?</span><br><span class="line"></span><br><span class="line">1.Automate screenshots</span><br><span class="line">2.Automate beta distribution to TestFlight</span><br><span class="line">3.Automate App Store distribution</span><br><span class="line">4.Manual setup - manually setup your project to automate your tasks</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 自动截屏。（帮助我们截取App的显示到appstore上的 截图）</span><br><span class="line">2 自动发布beta到TestFlight上，用于内测。</span><br><span class="line">3 自动打包发布到AppStore上。</span><br><span class="line">4 手动设置。</span><br></pre></td></tr></table></figure><p>上传 fir 选择的 4</p></li><li><p>初始化成功会生成如下目录</p></li></ul><p><img src="Xnip2019-10-09_14-40-37.jpg" alt=""></p><h3 id="配置相关文件"><a class="markdownIt-Anchor" href="#配置相关文件">#</a> 配置相关文件</h3><h4 id="配置gemfile"><a class="markdownIt-Anchor" href="#配置gemfile">#</a> 配置 Gemfile</h4><p>如果使用 cocoapods 要加上（<em>注意带上当前安装的 pod 的版本号</em>，否则会报错）</p><p><code>gem 'cocoapods', '~&gt;1.8.3'</code></p><p>执行</p><p><code>bundle install</code></p><blockquote><p>第一次运行 bundle install 时自动生成 Gemfile.lock 文件。以后每次运行 bundle install 时，如果 Gemfile 中的条目不变 bundle 就不会再次计算 gem 依赖版本号，直接根据 Gemfile.lock 检查和安装 gem。如果出现依赖冲突时可以通过 bundle update 更新 Gemfile.lock</p></blockquote><h4 id="配置fastfile"><a class="markdownIt-Anchor" href="#配置fastfile">#</a> 配置 Fastfile</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span><span class="title">ault_platform</span><span class="params">(<span class="symbol">:ios</span>)</span></span></span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">  before_all <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 如果你用 pod install</span></span><br><span class="line">    cocoapods </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  desc <span class="string">&quot;打包上传ipa到fir.im&quot;</span></span><br><span class="line">  lane <span class="symbol">:fir</span> <span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 如果你没有申请adhoc证书，sigh会自动帮你申请，并且添加到Xcode里</span></span><br><span class="line">  <span class="comment">#sigh(adhoc: true)</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment"># 以下两个action来自fastlane-plugin-versioning，</span></span><br><span class="line">  <span class="comment"># 第一个递增 Build，第二个设定Version。</span></span><br><span class="line">  <span class="comment"># 如果你有多个target，就必须指定target的值，否则它会直接找找到的第一个plist修改</span></span><br><span class="line">  <span class="comment"># 在这里我建议每一个打的包的Build都要不一样，这样crash了拿到日志，可以对应到ipa上</span></span><br><span class="line">  </span><br><span class="line">    increment_build_number_in_plist(</span><br><span class="line">        <span class="symbol">target:</span> <span class="string">&#x27;TestDemo&#x27;</span>,</span><br><span class="line"> <span class="symbol">build_number:</span> <span class="string">&#x27;5&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    increment_version_number_in_plist(</span><br><span class="line">        <span class="symbol">target:</span> <span class="string">&#x27;TestDemo&#x27;</span>,</span><br><span class="line">        <span class="symbol">version_number:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># gym用来编译ipa</span></span><br><span class="line">    gym(</span><br><span class="line">        <span class="symbol">scheme:</span> <span class="string">&#x27;TestDemo&#x27;</span>,</span><br><span class="line">        <span class="symbol">export_method:</span> <span class="string">&quot;ad-hoc&quot;</span>, <span class="comment"># 指定打包方式 [&quot;app-store&quot;, &quot;ad-hoc&quot;, &quot;package&quot;, &quot;enterprise&quot;, &quot;development&quot;, &quot;developer-id&quot;]</span></span><br><span class="line">        <span class="comment">#teamID: &quot;xxxxxx&quot;,  # developer.apple.com 上查看</span></span><br><span class="line">        <span class="symbol">xcargs:</span> <span class="string">&quot;-allowProvisioningUpdates&quot;</span>,</span><br><span class="line">        <span class="symbol">output_directory:</span> <span class="string">&#x27;./firim&#x27;</span>,</span><br><span class="line">        <span class="symbol">output_name:</span> <span class="string">&#x27;TestDemo.ipa&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 上传ipa到fir.im服务器，在fir.im获取firim_api_token</span></span><br><span class="line">    firim(<span class="symbol">firim_api_token:</span> <span class="string">&quot;xxxxxxxxxxxxx&quot;</span>)  <span class="comment"># token 在fir 上查看。</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  desc <span class="string">&quot;打包上传testflight/app-store&quot;</span></span><br><span class="line">  lane <span class="symbol">:tf</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    increment_build_number_in_plist(</span><br><span class="line">        <span class="symbol">target:</span> <span class="string">&#x27;TestDemo&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    increment_version_number_in_plist(</span><br><span class="line">        <span class="symbol">target:</span> <span class="string">&#x27;TestDemo&#x27;</span>,</span><br><span class="line">        <span class="symbol">version_number:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># gym用来编译ipa</span></span><br><span class="line">    gym(</span><br><span class="line">        <span class="symbol">scheme:</span> <span class="string">&#x27;TestDemo&#x27;</span>,</span><br><span class="line">        <span class="symbol">export_method:</span> <span class="string">&quot;app-store&quot;</span>, <span class="comment"># 指定打包方式</span></span><br><span class="line">        <span class="comment">#teamID: &quot;xxxxxx&quot;,  # developer.apple.com 上查看</span></span><br><span class="line">        <span class="symbol">xcargs:</span> <span class="string">&quot;-allowProvisioningUpdates&quot;</span>,</span><br><span class="line">        <span class="symbol">output_directory:</span> <span class="string">&#x27;./testflight&#x27;</span>,</span><br><span class="line">        <span class="symbol">output_name:</span> <span class="string">&#x27;TestDemo.ipa&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#upload_to_testflight</span></span><br><span class="line">    appstore       <span class="comment"># 上传你的App iTunes Connect</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>关于 build_number 与 version_number</p><p>1,version_number、build_number 都没有设置，会自动获取项目的 version 和 build 版本号，并且都自动加 1。例如，fastlane 打包前后版本号变化：ver1.0.2（Build 11）-&gt; ver1.0.3（Build 12）；<br>2,version_number 设置了、build_number 没设置，会自动获取项目 build 版本号，build 版本号 + 1；<br>3,version_number、build_number 都设置了，那打包出来的版本号就是设置的版本号，不会自动 + 1；</p></blockquote><h4 id="添加两个插件"><a class="markdownIt-Anchor" href="#添加两个插件">#</a> 添加两个插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastlane add_plugin versioning</span><br><span class="line">fastlane add_plugin firim</span><br></pre></td></tr></table></figure><h3 id="执行打包"><a class="markdownIt-Anchor" href="#执行打包">#</a> 执行打包</h3><h4 id="上传firim"><a class="markdownIt-Anchor" href="#上传firim">#</a> <a href="http://xn--fir-u28ds3c.im">上传 fir.im</a></h4><p><code>fastlane fir</code></p><blockquote><p><code>fir</code>  为 Fastfile 文件中 <code>lane :fir do</code>  处设置的名字，可以为别的名字</p></blockquote><p>执行打包成功如下图所示：</p><img src="Xnip2019-10-10_15-01-27.jpg" style="zoom:5%" /><ul><li><p>根目录下 <code>firim</code>  文件夹下可看到 <code>ipa</code>  文件</p><p><img src="Xnip2019-10-10_15-22-43.jpg" alt=""></p></li><li><p>fir.im 应用列表，多了刚上传的项目</p><p><img src="Xnip2019-10-10_15-01-59.jpg" alt=""></p></li></ul><h4 id="上传testflight"><a class="markdownIt-Anchor" href="#上传testflight">#</a> 上传 testFlight</h4><p><code>fastlane tf</code></p><h2 id="问题"><a class="markdownIt-Anchor" href="#问题">#</a> 问题</h2><ol><li>Could not find action, lane or variable ‘increment_build_number_in_plist’…</li></ol><p><img src="Xnip2019-10-10_11-39-52.jpg" alt=""></p><ul><li><p>解决：</p><p><code>fastlane add_plugin versioning</code></p></li></ul><p>参考：<a href="https://github.com/SiarheiFedartsou/fastlane-plugin-versioning/issues/20">https://github.com/SiarheiFedartsou/fastlane-plugin-versioning/issues/20</a></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考</h2><ol><li><a href="https://www.jianshu.com/p/2918cf082b9d">fastlane 自动打包到 fir.im 的踩坑之路</a></li><li><a href="https://docs.fastlane.tools/getting-started/ios/setup/">fastlane ios 快读入门文档</a></li><li><a href="https://www.jianshu.com/p/19ae8cc865b0">fastlane 使用说明书</a></li><li><a href="https://www.jianshu.com/p/48343a655f75">fastlane 在 mac 上配置 iOS 自动化上架</a></li><li><a href="https://www.jianshu.com/p/eab3e1ded17d">iOS 自动打包 - fastlane （一）</a></li><li><a href="https://juejin.im/post/5a7d51986fb9a063435ece35">和重复劳动说再见 - 使用 fastlane 进行 iOS 打包</a></li><li><a href="https://zhuanlan.zhihu.com/p/25976099">macOS/Linux 环境变量设置</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;日复一日重复打包工作，是在浪费宝贵的时间&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;自动化打包工具应运而生，是我们解放双手的利器&lt;/em&gt;&lt;/p</summary>
      
    
    
    
    <category term="作者：Fan Chason" scheme="http://example.com/categories/%E4%BD%9C%E8%80%85%EF%BC%9AFan-Chason/"/>
    
    
    <category term="自动化打包" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo和Github搭建技术博客</title>
    <link href="http://example.com/2019/09/26/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2019/09/26/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-09-26T06:40:33.000Z</published>
    <updated>2020-04-22T02:58:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a class="markdownIt-Anchor" href="#准备">#</a> 准备:</h2><p><code>nodejs</code> 、 <code>git</code> 、 <code>npm</code> 、 <code>hexo</code></p><p>验证有没有敲命令，eg:  <code>npm -v</code> ，没有装先去装</p><ul><li><p>npm 可通过 homebrew 安装</p><p><code>brew install npm</code></p></li><li><p>Hexo 安装</p><p><code>npm install hexo-cli -g</code></p></li></ul><h2 id="开始搭建博客"><a class="markdownIt-Anchor" href="#开始搭建博客">#</a> 开始搭建博客</h2><ul><li><p>本地创建一个存放博客文件夹</p><p>eg: SkytechMobileBlog</p></li><li><p>切到 <code>SkytechMobileBlog</code>  目录下执行 <code>初始化</code></p><p><code>hexo init</code></p></li><li><p>然后安装依赖</p><p><code>npm install</code></p></li><li><p>生成静态文件</p><p><code>hexo g</code></p></li><li><p>创建服务</p><p><code>hexo s</code></p></li><li><p>hexo 常用命令：</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>hexo init</code></td><td>初始化一个文件夹，它会为这个文件夹配置所有骨架</td></tr><tr><td><code>hexo g</code></td><td>即 hexo generate，生成静态文件</td></tr><tr><td><code>hexo s</code></td><td>即 hexo server，创建服务</td></tr><tr><td><code>hexo d</code></td><td>即 hexo deploy, 用于将本地文件发布到 github 上</td></tr><tr><td><code>hexo n</code></td><td>即 hexo new, 用于新建一篇文章</td></tr></tbody></table><p>现在只是在本地搭建了一个技术博客，</p><p>要想把博客内容让所有人都能看到，就得借助 Github 了，把博客内容部署到 Github 上去</p></li></ul><a id="more"></a><h2 id="部署到github"><a class="markdownIt-Anchor" href="#部署到github">#</a> 部署到 github</h2><ol><li>GitHub 上登录 / 注册一个账号，创建仓库</li></ol><ul><li><p>如果是团队博客</p><p>先 <code>New organization</code> ，再 <code>New repository</code> （名字为 <code>xxx.github.io</code> ， <code>xxx</code>  为 organization 名称）</p></li><li><p>如果是个人博客：</p><p><code>New repository</code> （名字为 <code>xxx.github.io</code> ， <code>xxx</code>  为 github 账号）</p></li></ul><ol start="2"><li>博客的根目录的 <code>_config.yml</code>  文件的底部 <code>deploy</code>  设置为：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;SkytechMobile&#x2F;SkytechMobile.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：冒号（:）后都有一个空格。你可以把此段代码复制过去，并把 <code>https://github.com/SkytechMobile/SkytechMobile.github.io.git</code>  替换为你自己的 Github 仓库路径</p><ol start="3"><li><p>部署</p><p>根目录下执行</p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>或者直接</p><p><code>hexo g -d</code></p><p>如果此时报错你可以输入 <code>npm install hexo-deployer-git --save</code>  来解决</p></li><li><p>以上都没什么问题的话，访 <a href="http://SkytechMobile.github.io/">http://SkytechMobile.github.io/</a> 就能看到自己的博客了</p></li></ol><h2 id="主题配置"><a class="markdownIt-Anchor" href="#主题配置">#</a> 主题配置</h2><p>Eg: 把主题设置为 <code>next</code> ，最火的 hexo 的主题。</p><ol><li><p>下载主题</p><p>在跟目录文件夹下输入如下命令下载 next 主题</p><p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p></li><li><p>设置主题</p><p>把 <code>SKytechMobileBlog/_config.yml</code>  文件称为 <code>站点配置</code></p><p>把 <code>SKytechMobileBlog/_config.yml</code>  文件称为 <code>主题配置</code></p></li></ol><p>下载完成后，将 <code>站点配置</code> 文件的 <code>theme</code>  字段的值改为 <code>next</code> ，重新编译并上传到 Github 上后，访问博客链接，你就会发现主题已经改成 next 了</p><p>next 的默认语言为英文，你可以更改为简体中文，找到并打开 <code>站点配置</code> 文件，找到 <code>language</code>  字段，将值改为 <code>zh-Hans</code></p><ol start="3"><li>这里介绍下 <code>站点配置</code> 文件部分字段的含义：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: SkytechMobile团队博客 &#x2F;&#x2F; 博客名称</span><br><span class="line">subtitle:   &#x2F;&#x2F; 博客副名称</span><br><span class="line">description:           &#x2F;&#x2F; 描述</span><br><span class="line">author: 晨之科SDK团队    &#x2F;&#x2F; 作者</span><br><span class="line">language: zh-Hans      &#x2F;&#x2F; 语言</span><br></pre></td></tr></table></figure><h2 id="关于新建博客"><a class="markdownIt-Anchor" href="#关于新建博客">#</a> 关于新建博客</h2><h3 id="一-如何新建博客"><a class="markdownIt-Anchor" href="#一-如何新建博客">#</a> 一、如何新建博客</h3><p>新建命令</p><p><code>hexo new xxx</code></p><p>执行上面的命令即在 <code>source/_posts/</code>  目录下新建了名为 <code>xxx的md文件</code> 和 <code>资源文件夹</code></p><h3 id="二-将本地博客发布到线上"><a class="markdownIt-Anchor" href="#二-将本地博客发布到线上">#</a> 二、将本地博客发布到线上</h3><p>生成静态文件，并将本地文件发布到 github 上，合并执行</p><p><code>hexo g -d</code></p><h3 id="三-写博客注意点"><a class="markdownIt-Anchor" href="#三-写博客注意点">#</a> 三、写博客注意点</h3><ol><li>如何上传带图片的博客？</li></ol><p><img src="useImage.png" alt=""></p><ol start="2"><li><p>团队博客设置作者</p><p>可在博客 md 文件 <code>分类</code> 字段设置</p><p><code>categories：作者：Fan Chason</code></p></li></ol><p><img src="common_on.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备&quot;&gt;#&lt;/a&gt; 准备:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nodejs&lt;/code&gt; 、 &lt;code&gt;git&lt;/code&gt; 、 &lt;code&gt;npm&lt;/code&gt; 、 &lt;code&gt;hexo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;验证有没有敲命令，eg:  &lt;code&gt;npm -v&lt;/code&gt; ，没有装先去装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm 可通过 homebrew 安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew install npm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hexo 安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install hexo-cli -g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开始搭建博客&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#开始搭建博客&quot;&gt;#&lt;/a&gt; 开始搭建博客&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地创建一个存放博客文件夹&lt;/p&gt;
&lt;p&gt;eg: SkytechMobileBlog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切到 &lt;code&gt;SkytechMobileBlog&lt;/code&gt;  目录下执行 &lt;code&gt;初始化&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo init&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后安装依赖&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成静态文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建服务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hexo 常用命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexo init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初始化一个文件夹，它会为这个文件夹配置所有骨架&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexo g&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;即 hexo generate，生成静态文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexo s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;即 hexo server，创建服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexo d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;即 hexo deploy, 用于将本地文件发布到 github 上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexo n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;即 hexo new, 用于新建一篇文章&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在只是在本地搭建了一个技术博客，&lt;/p&gt;
&lt;p&gt;要想把博客内容让所有人都能看到，就得借助 Github 了，把博客内容部署到 Github 上去&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="作者：Fan Chason" scheme="http://example.com/categories/%E4%BD%9C%E8%80%85%EF%BC%9AFan-Chason/"/>
    
    
    <category term="搭建博客" scheme="http://example.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
