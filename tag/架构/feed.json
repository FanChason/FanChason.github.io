{
    "version": "https://jsonfeed.org/version/1",
    "title": "Fan Chason's Blog • All posts by \"架构\" tag",
    "description": "Fan Chason的个人博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/10/17/Viper%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "http://example.com/2019/10/17/Viper%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "Viper架构探索实践（一）",
            "date_published": "2019-10-17T11:35:00.000Z",
            "content_html": "<h1 id=\"Viper架构图\"><a href=\"#Viper架构图\" class=\"headerlink\" title=\"Viper架构图\"></a>Viper架构图</h1><p><img src=\"http://upload-images.jianshu.io/upload_images/1432381-6aa65d17f5ed033f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1432381-0b5691a0070fbabd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1865432-580872920986b640.png\"></p>\n<h2 id=\"VIPER的主要部分\"><a href=\"#VIPER的主要部分\" class=\"headerlink\" title=\"VIPER的主要部分\"></a>VIPER的主要部分</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li>View: (视图）： 显示Presenter告知的内容，并将用户输入中继回Presenter。</li>\n<li>Interactor: (交互器）：包含用例指定的业务逻辑。</li>\n<li>Presenter: (表示层，也可称主持人）：包含用于准备显示内容（如从Interactor接收的）和用于对用户输入做出反应（通过从Interactor请求新数据）的视图逻辑。</li>\n<li>Entity: (实体）：包含Interactor使用的基本模型对象。</li>\n<li>Routing: (路由）：包含用于描述按哪个顺序显示哪些屏幕的导航逻辑。</li>\n</ul>\n<blockquote>\n<p>这种分离也符合<a href=\"http://www.objectmentor.com/resources/articles/srp.pdf\">单一责任原则</a>。<br>Interactor负责业务分析师<br>Presenter代表交互设计师<br>View负责视觉设计师</p>\n</blockquote>\n<h3 id=\"相比MVX\"><a href=\"#相比MVX\" class=\"headerlink\" title=\"相比MVX\"></a>相比MVX</h3><p>相比之前的MVX架构，VIPER多出了两个东西：Interactor（交互器）和Router（路由）。</p>\n<p>各部分职责如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- View</span><br><span class=\"line\">提供完整的视图，负责视图的组合、布局、更新</span><br><span class=\"line\">向Presenter提供更新视图的接口</span><br><span class=\"line\">将View相关的事件发送给Presenter</span><br><span class=\"line\"></span><br><span class=\"line\">- Presenter</span><br><span class=\"line\">接收并处理来自View的事件</span><br><span class=\"line\">向Interactor请求调用业务逻辑</span><br><span class=\"line\">向Interactor提供View中的数据</span><br><span class=\"line\">接收并处理来自Interactor的数据回调事件</span><br><span class=\"line\">通知View进行更新操作</span><br><span class=\"line\">通过Router跳转到其他View</span><br><span class=\"line\"></span><br><span class=\"line\">- Router</span><br><span class=\"line\">提供View之间的跳转功能，减少了模块间的耦合</span><br><span class=\"line\">初始化VIPER的各个模块</span><br><span class=\"line\"></span><br><span class=\"line\">- Interactor</span><br><span class=\"line\">维护主要的业务逻辑功能，向Presenter提供现有的业务用例</span><br><span class=\"line\">维护、获取、更新Entity</span><br><span class=\"line\">当有业务相关的事件发生时，处理事件，并通知Presenter</span><br><span class=\"line\"></span><br><span class=\"line\">- Entity</span><br><span class=\"line\">和Model一样的数据模型</span><br></pre></td></tr></table></figure>\n<h1 id=\"Viper模版代码生成工具\"><a href=\"#Viper模版代码生成工具\" class=\"headerlink\" title=\"Viper模版代码生成工具\"></a>Viper模版代码生成工具</h1><h2 id=\"推荐两个模版\"><a href=\"#推荐两个模版\" class=\"headerlink\" title=\"推荐两个模版\"></a>推荐两个模版</h2><h3 id=\"Viperit\"><a href=\"#Viperit\" class=\"headerlink\" title=\"Viperit\"></a><a href=\"https://github.com/ferranabello/Viperit\">Viperit</a></h3><ul>\n<li>支持Swift、SwiftUI</li>\n<li>可创建viper架构模版</li>\n</ul>\n<h3 id=\"Generamba\"><a href=\"#Generamba\" class=\"headerlink\" title=\"Generamba\"></a><a href=\"https://github.com/strongself/Generamba\">Generamba</a></h3><ul>\n<li>支持OC和Swift</li>\n<li>可以创建mvvm、viper模版</li>\n</ul>\n<h2 id=\"了解模版语言Liquid\"><a href=\"#了解模版语言Liquid\" class=\"headerlink\" title=\"了解模版语言Liquid\"></a>了解模版语言Liquid</h2><p>github源码：**<a href=\"https://github.com/Shopify/liquid\">liquid</a>**<br><a href=\"https://www.baidu.com/link?url=fK4IqIz8Jd_NwiiLfMbodfFYy5521QApXPJBhxB5yD_ACOge0kdPzMlm5_3B_tT9&wd=&eqid=df8a26640004378f000000045a6a8ac1\"><em>Liquid</em> 模板语言中文文档</a></p>\n<blockquote>\n<p>Liquid 是一门开源的模板语言，由 <a href=\"https://www.shopify.com/\">Shopify</a> 创造并用 Ruby 实现。它是 Shopify 主题的骨骼，并且被用于加载店铺系统的动态内容。<br><br>从 2006 年起，Liquid 就被 Shopify 所使用，现在更是被大量 web 应用所使用</p>\n</blockquote>\n<h1 id=\"Viper架构实践\"><a href=\"#Viper架构实践\" class=\"headerlink\" title=\"Viper架构实践\"></a>Viper架构实践</h1><p>基于Viperit写了一个简单的新闻的demo<br><strong><a href=\"https://github.com/FanChason/XCViperitDemo\">XCViperitDemo</a></strong></p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><ol>\n<li>viper原作者 By <a href=\"mailto:jeff.gilbert@mutualmobile.com\">Jeff Gilbert</a> and <a href=\"https://twitter.com/conradstoll\">Conrad Stoll</a> 著<br><a href=\"https://www.objc.io/issues/13-architecture/viper/\">Architecting iOS Apps with VIPER</a></li>\n<li><a href=\"https://juejin.im/post/599a43035188252432172045\">iOS VIPER架构实践(二)：VIPER详解与实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/340b39c6d256\">iOS架构模式-VIPER</a></li>\n</ol>\n",
            "tags": [
                "架构"
            ]
        }
    ]
}