{
    "version": "https://jsonfeed.org/version/1",
    "title": "Fan Chason • All posts by \"架构\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/10/17/Viper%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "http://example.com/2019/10/17/Viper%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "Viper架构探索实践（一）",
            "date_published": "2019-10-17T11:35:00.000Z",
            "content_html": "<h1 id=\"viper架构图\"><a class=\"markdownIt-Anchor\" href=\"#viper架构图\">#</a> Viper 架构图</h1>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1432381-6aa65d17f5ed033f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1432381-0b5691a0070fbabd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1865432-580872920986b640.png\"></p>\n<h2 id=\"viper的主要部分\"><a class=\"markdownIt-Anchor\" href=\"#viper的主要部分\">#</a> VIPER 的主要部分</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<ul>\n<li>View: (视图）： 显示 Presenter 告知的内容，并将用户输入中继回 Presenter。</li>\n<li>Interactor: (交互器）：包含用例指定的业务逻辑。</li>\n<li>Presenter: (表示层，也可称主持人）：包含用于准备显示内容（如从 Interactor 接收的）和用于对用户输入做出反应（通过从 Interactor 请求新数据）的视图逻辑。</li>\n<li>Entity: (实体）：包含 Interactor 使用的基本模型对象。</li>\n<li>Routing: (路由）：包含用于描述按哪个顺序显示哪些屏幕的导航逻辑。</li>\n</ul>\n<blockquote>\n<p>这种分离也符合<a href=\"http://www.objectmentor.com/resources/articles/srp.pdf\">单一责任原则</a>。<br>\nInteractor 负责业务分析师<br>\n Presenter 代表交互设计师<br>\n View 负责视觉设计师</p>\n</blockquote>\n<h3 id=\"相比mvx\"><a class=\"markdownIt-Anchor\" href=\"#相比mvx\">#</a> 相比 MVX</h3>\n<p>相比之前的 MVX 架构，VIPER 多出了两个东西：Interactor（交互器）和 Router（路由）。</p>\n<p>各部分职责如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- View</span><br><span class=\"line\">提供完整的视图，负责视图的组合、布局、更新</span><br><span class=\"line\">向Presenter提供更新视图的接口</span><br><span class=\"line\">将View相关的事件发送给Presenter</span><br><span class=\"line\"></span><br><span class=\"line\">- Presenter</span><br><span class=\"line\">接收并处理来自View的事件</span><br><span class=\"line\">向Interactor请求调用业务逻辑</span><br><span class=\"line\">向Interactor提供View中的数据</span><br><span class=\"line\">接收并处理来自Interactor的数据回调事件</span><br><span class=\"line\">通知View进行更新操作</span><br><span class=\"line\">通过Router跳转到其他View</span><br><span class=\"line\"></span><br><span class=\"line\">- Router</span><br><span class=\"line\">提供View之间的跳转功能，减少了模块间的耦合</span><br><span class=\"line\">初始化VIPER的各个模块</span><br><span class=\"line\"></span><br><span class=\"line\">- Interactor</span><br><span class=\"line\">维护主要的业务逻辑功能，向Presenter提供现有的业务用例</span><br><span class=\"line\">维护、获取、更新Entity</span><br><span class=\"line\">当有业务相关的事件发生时，处理事件，并通知Presenter</span><br><span class=\"line\"></span><br><span class=\"line\">- Entity</span><br><span class=\"line\">和Model一样的数据模型</span><br></pre></td></tr></table></figure>\n<h1 id=\"viper模版代码生成工具\"><a class=\"markdownIt-Anchor\" href=\"#viper模版代码生成工具\">#</a> Viper 模版代码生成工具</h1>\n<h2 id=\"推荐两个模版\"><a class=\"markdownIt-Anchor\" href=\"#推荐两个模版\">#</a> 推荐两个模版</h2>\n<h3 id=\"viperit\"><a class=\"markdownIt-Anchor\" href=\"#viperit\">#</a> <a href=\"https://github.com/ferranabello/Viperit\">Viperit</a></h3>\n<ul>\n<li>支持 Swift、SwiftUI</li>\n<li>可创建 viper 架构模版</li>\n</ul>\n<h3 id=\"generamba\"><a class=\"markdownIt-Anchor\" href=\"#generamba\">#</a> <a href=\"https://github.com/strongself/Generamba\">Generamba</a></h3>\n<ul>\n<li>支持 OC 和 Swift</li>\n<li>可以创建 mvvm、viper 模版</li>\n</ul>\n<h2 id=\"了解模版语言liquid\"><a class=\"markdownIt-Anchor\" href=\"#了解模版语言liquid\">#</a> 了解模版语言 Liquid</h2>\n<p>github 源码：<strong><a href=\"https://github.com/Shopify/liquid\">liquid</a></strong><br>\n<a href=\"https://www.baidu.com/link?url=fK4IqIz8Jd_NwiiLfMbodfFYy5521QApXPJBhxB5yD_ACOge0kdPzMlm5_3B_tT9&amp;wd=&amp;eqid=df8a26640004378f000000045a6a8ac1\"><em>Liquid</em> 模板语言中文文档</a></p>\n<blockquote>\n<p>Liquid 是一门开源的模板语言，由 <a href=\"https://www.shopify.com/\">Shopify</a> 创造并用 Ruby 实现。它是 Shopify 主题的骨骼，并且被用于加载店铺系统的动态内容。<br><br>\n从 2006 年起，Liquid 就被 Shopify 所使用，现在更是被大量 web 应用所使用</p>\n</blockquote>\n<h1 id=\"viper架构实践\"><a class=\"markdownIt-Anchor\" href=\"#viper架构实践\">#</a> Viper 架构实践</h1>\n<p>基于 Viperit 写了一个简单的新闻的 demo<br>\n<strong><a href=\"https://github.com/FanChason/XCViperitDemo\">XCViperitDemo</a></strong></p>\n<h1 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\">#</a> 参考：</h1>\n<ol>\n<li>viper 原作者 By <a href=\"mailto:jeff.gilbert@mutualmobile.com\">Jeff Gilbert</a> and <a href=\"https://twitter.com/conradstoll\">Conrad Stoll</a> 著<br>\n<a href=\"https://www.objc.io/issues/13-architecture/viper/\"> Architecting iOS Apps with VIPER</a></li>\n<li><a href=\"https://juejin.im/post/599a43035188252432172045\">iOS VIPER 架构实践 (二)：VIPER 详解与实现</a></li>\n<li><a href=\"https://www.jianshu.com/p/340b39c6d256\">iOS 架构模式 - VIPER</a></li>\n</ol>\n",
            "tags": [
                "架构"
            ]
        }
    ]
}